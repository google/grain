# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
module(
    name = "grain",
    version = "0.2.12",
    repo_name = "com_google_grain",
)

bazel_dep(name = "bazel_skylib", version = "1.6.1")
bazel_dep(name = "platforms", version = "0.0.10")
bazel_dep(name = "rules_python", version = "0.37.0")
bazel_dep(name = "rules_cc", version = "0.0.9")
bazel_dep(name = "pybind11_bazel", version = "2.12.0")
bazel_dep(name = "abseil-py", version = "2.1.0")
bazel_dep(name = "abseil-cpp", version = "20240722.0")
bazel_dep(name = "protobuf", version = "28.3", repo_name = "com_google_protobuf")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "pybind11",
    build_file = "@pybind11_bazel//:pybind11.BUILD",
    sha256 = "201966a61dc826f1b1879a24a3317a1ec9214a918c8eb035be2f30c3e9cfbdcb",
    strip_prefix = "pybind11-2.10.3",
    urls = ["https://github.com/pybind/pybind11/archive/refs/tags/v2.10.3.zip"],
)

SUPPORTED_PYTHON_VERSIONS = [
    "3.10",
    "3.11",
    "3.12",
    "3.13",
]

DEFAULT_PYTHON_VERSION = "3.10"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")

[
    python.toolchain(
        ignore_root_user_error = True,
        is_default = python_version == DEFAULT_PYTHON_VERSION,
        python_version = python_version,
    )
    for python_version in SUPPORTED_PYTHON_VERSIONS
]

use_repo(python, python = "python_versions")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")

# requirements_lock.txt is generated by
# bazel run //:requirements.update
[
    pip.parse(
        hub_name = "pypi",
        python_version = version,
        requirements_lock = "test_requirements_lock_" + version.replace(".", "_") + ".txt",
    )
    for version in SUPPORTED_PYTHON_VERSIONS
]

use_repo(pip, "pypi")
